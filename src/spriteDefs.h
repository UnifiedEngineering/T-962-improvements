// 9x16 numbers.
// Vertical strips
// 18 bytes per character
// odd bytes are top byte, with MSB at lowest vertical condition

#ifndef SPRITES_H
#define SPRITES_H

const uint16_t sprite9x16[] ={
	0b0111111111111110, 0b1111111111111111, 0b1111111111111111, 0b1110000000000111, 0b1110000000000111, 0b1110000000000111, 0b1111111111111111, 0b1111111111111111, 0b0111111111111110,	// 0
	0b0000000000000000, 0b1110000000000000, 0b1110000000001110, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1110000000000000, 0b1110000000000000, 0b0000000000000000,	// 1
	0b1111111110001110, 0b1111111111001111, 0b1111111111001111, 0b1110000111000111, 0b1110000111000111, 0b1110000111000111, 0b1110000111111111, 0b1110000111111111, 0b1110000011111110,	// 2
	0b1110000000000111, 0b1110000000000111, 0b1110000111000111, 0b1110000111000111, 0b1110000111000111, 0b1110000111000111, 0b1111111111111111, 0b1111111111111111, 0b0111111111111110, // 3
	0b0000000011111111, 0b0000000111111111, 0b0000000111111111, 0b0000000111000000, 0b0000000111000000, 0b0000000111000000, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, // 4
	0b0111000111111111, 0b1111000111111111, 0b1111000111000111, 0b1110000111000111, 0b1110000111000111, 0b1110000111000111, 0b1111111111000111, 0b1111111111000111, 0b0111111110000111,	// 5
	0b0111111111111110, 0b1111111111111111, 0b1111111111111111, 0b1110000111000111, 0b1110000111000111, 0b1110000111000111, 0b1111111111000111, 0b1111111111000111, 0b0111111110000111,	// 6
	0b0000000000000111, 0b0000000000000111, 0b0000000000000111, 0b0000000000000111, 0b0000000000000111, 0b0000000000000111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111,	// 7
	0b0111111101111110, 0b1111111111111111, 0b1111111111111111, 0b1110000111000111, 0b1110000111000111, 0b1110000111000111, 0b1111111111111111, 0b1111111111111111, 0b0111111101111110,	// 8
	0b0111000011111110, 0b1111000111111111, 0b1111000111111111, 0b1110000111000111, 0b1110000111000111, 0b1110000111000111, 0b1111111111111111, 0b1111111111111111, 0b0111111111111110,	// 9
	0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, // <solid block>
};

// Pacman and ghost sprites - first 7 for Pacman, then 6 graphics for ghosts, with right-facing mirrored, then 4 scores
const uint16_t sprite16x16[] ={
	0b0000011111100000, 0b0001111111111000, 0b0011111111111100, 0b0111111111111110, 0b0111111111111110, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b0111111111111110, 0b0111111111111110, 0b0011111111111100, 0b0001111111111000, 0b0000011111100000,

	0b0000011111100000, 0b0001111111111000, 0b0011111111111100, 0b0111111111111110, 0b0111111111111110, 0b1111111111111111, 0b1111111111111111, 0b1111111111111111, 0b1111111011111111, 0b1111111011111111, 0b1111110001111111, 0b0111110001111110, 0b0111100000111110, 0b0011100000111100, 0b0001000000011000, 0b0000000000000000,
	0b0000011111100000, 0b0001111111111000, 0b0011111111111100, 0b0111111111111110, 0b0111111111111110, 0b1111111111111111, 0b1111111011111111, 0b1111110001111111, 0b1111100000111111, 0b1111000000011111, 0b1110000000001111, 0b0100000000000110, 0b0000000000000010, 0b0000000000000000, 0b0000000000000000, 0b0000000000000000,

	0b0000011111100000, 0b0001111111111000, 0b0011111111111100, 0b0111111111111110, 0b0111111111111110, 0b1111111111111100, 0b1111111111110000, 0b1111111111000000, 0b1111111100000000, 0b1111111111000000, 0b1111111111110000, 0b0111111111111100, 0b0111111111111110, 0b0011111111111100, 0b0001111111111000, 0b0000011111100000,
	0b0000011111100000, 0b0001111111111000, 0b0011111111110000, 0b0111111111100000, 0b0111111111000000, 0b1111111110000000, 0b1111111100000000, 0b1111111000000000, 0b1111110000000000, 0b1111111000000000, 0b1111111100000000, 0b0111111110000000, 0b0111111111000000, 0b0011111111100000, 0b0001111111110000, 0b0000011111100000,

	0b0000011111100000, 0b0001111111111000, 0b0011111111111100, 0b0111111111111110, 0b0011111111111110, 0b0000111111111111, 0b0000001111111111, 0b0000000011111111, 0b0000001111111111, 0b0000111111111111, 0b0011111111111111, 0b0111111111111110, 0b0111111111111110, 0b0011111111111100, 0b0001111111111000, 0b0000011111100000,
	0b0000011111100000, 0b0000111111111000, 0b0000011111111100, 0b0000001111111110, 0b0000000111111110, 0b0000000011111111, 0b0000000001111111, 0b0000000000111111, 0b0000000001111111, 0b0000000011111111, 0b0000000111111111, 0b0000001111111110, 0b0000011111111110, 0b0000111111111100, 0b0001111111111000, 0b0000011111100000,

	0b0000000000000000, 0b1111111111100000, 0b0111111111111000, 0b0011111111111100, 0b0111111110001110, 0b1111111100000110, 0b1111111101110111, 0b0011111110001111, 0b0011111111111111, 0b1111111110001111, 0b1111111100000110, 0b0111111101110110, 0b0011111110001100, 0b0111111111111000, 0b1111111111100000, 0b0000000000000000,
	0b0000000000000000, 0b0111111111100000, 0b1111111111111000, 0b1111111111111100, 0b0111111110001110, 0b0011111100000110, 0b0111111101110111, 0b1111111110001111, 0b1111111111111111, 0b0111111110001111, 0b0011111100000110, 0b0111111101110110, 0b1111111110001100, 0b1111111111111000, 0b0111111111100000, 0b0000000000000000,

	0b0000000000000000, 0b1111111111100000, 0b0111111111111000, 0b0011111111111100, 0b0111111110001110, 0b1111111100010110, 0b1111111100010111, 0b0011111110001111, 0b0011111111111111, 0b1111111110001111, 0b1111111100010110, 0b0111111100010110, 0b0011111110001100, 0b0111111111111000, 0b1111111111100000, 0b0000000000000000,
	0b0000000000000000, 0b0111111111100000, 0b1111111111111000, 0b1111111111111100, 0b0111111110001110, 0b0011111100010110, 0b0111111100010111, 0b1111111110001111, 0b1111111111111111, 0b0111111110001111, 0b0011111100010110, 0b0111111100010110, 0b1111111110001100, 0b1111111111111000, 0b0111111111100000, 0b0000000000000000,

	0b0000000000000000, 0b1111111111100000, 0b0111111111111000, 0b0011111111111100, 0b0111111110001110, 0b1111111101000110, 0b1111111101000111, 0b0011111110001111, 0b0011111111111111, 0b1111111110001111, 0b1111111101000110, 0b0111111101000110, 0b0011111110001100, 0b0111111111111000, 0b1111111111100000, 0b0000000000000000,
	0b0000000000000000, 0b0111111111100000, 0b1111111111111000, 0b1111111111111100, 0b0111111110001110, 0b0011111101000110, 0b0111111101000111, 0b1111111110001111, 0b1111111111111111, 0b0111111110001111, 0b0011111101000110, 0b0111111101000110, 0b1111111110001100, 0b1111111111111000, 0b0111111111100000, 0b0000000000000000,

	0b0000000000000000, 0b0000000000000000, 0b0000000010000100, 0b0000000011111110, 0b0000000010000000, 0b0000000000000000, 0b0000000001111100, 0b0000000010000010, 0b0000000010000010, 0b0000000001111100, 0b0000000000000000, 0b0000000001111100, 0b0000000010000010, 0b0000000010000010, 0b0000000001111100, 0b0000000000000000,
	0b0000000000000000, 0b0000000011000100, 0b0000000010100010, 0b0000000010010010, 0b0000000010001100, 0b0000000000000000, 0b0000000001111100, 0b0000000010000010, 0b0000000010000010, 0b0000000001111100, 0b0000000000000000, 0b0000000001111100, 0b0000000010000010, 0b0000000010000010, 0b0000000001111100, 0b0000000000000000,
	0b0000000000000000, 0b0000000001101100, 0b0000000010010010, 0b0000000010010010, 0b0000000001101100, 0b0000000000000000, 0b0000000001111100, 0b0000000010000010, 0b0000000010000010, 0b0000000001111100, 0b0000000000000000, 0b0000000001111100, 0b0000000010000010, 0b0000000010000010, 0b0000000001111100, 0b0000000000000000,
	0b0000000011111110, 0b0000000000000000, 0b0000000001111100, 0b0000000010010010, 0b0000000010010010, 0b0000000001110100, 0b0000000000000000, 0b0000000001111100, 0b0000000010000010, 0b0000000010000010, 0b0000000001111100, 0b0000000000000000, 0b0000000001111100, 0b0000000010000010, 0b0000000010000010, 0b0000000001111100,
};
#endif
